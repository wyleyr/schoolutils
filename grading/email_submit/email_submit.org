#+TITLE: email_submit.py: a simple grading system
#+AUTHOR:    Richard Lawrence
#+EMAIL:     richard.lawrence@berkeley.edu
#+DATE:      2011-08-23 Tue
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* Introduction
** What is it?
   email_submit.py is an almost-stupidly simple system for managing
   submissions of student assignments (or whatever) via email. It
   takes care of:
     - splitting attachments off from incoming email
     - saving attachments in a directory using a consistent naming convention
     - sending feedback emails to the original senders once the
       assignments have been graded
   
   The point is to remove the tedium of saving individual student
   assignments by hand, and sending individual feedback messages by
   hand, so you can focus on what's really important: grading those
   assignments.

   The basic workflow that email_submit.py supports is:
   1) Download and save all incoming assignments at once
   2) Create feedback for each assignment (by modifying the assignment files)
   3) Send all assignment files back to their original senders at once,
      with your feedback

** What isn't it?
   email_submit.py doesn't try to do things that other programs
   already do quite well.  So it doesn't do these things:
     - fetch your mail for you (you must configure a mail-fetching
       program yourself; see "Configuration" below)
     - check incoming assignment files for viruses
     - display assignment files
     - manage directories where you store assignment files
     - keep track of grades, calculate grades, etc.

** Who is it for?
email_submit.py will be great for you if:
   - you receive student assignments via email
   - you grade them electronically, by modifying the assignment
     files themselves
   - you're not afraid of typing commands into your computer to save
     yourself manual labor

\noindent
email_submit.py /might/ work for you if:
   - you receive student assignments via email, but want to print
     hard copies for grading
   - you receive hard copies of student assignments, but want to
     send feedback or grades via email
   - you want to do something more complicated, but know how to
     program in Python

* Installation
** Prerequisites
   1) *A Unix-like environment*. Something like GNU/Linux or Mac OS
      X. Sorry, Windows folks.[fn:1]
   2) *Python*.  email_submit.py is a Python program, so you need a
      Python interpreter.  Many operating systems ship with Python,
      but if you don't have it already, you can download it from
      http://python.org/download/.  (Make sure you download the latest
      2.x interpreter; Python 3 is not yet supported.)
   3) *A mail fetching program*.  If you don't know what this is, you
      probably don't have one already, but never fear! email_submit.py
      is designed to work with getmail, another Python program, which
      you can download from http://pyropus.ca/software/getmail/. If
      you already have a mail fetching program, make sure it can be
      configured to pipe incoming mail messages to the standard input
      of another program.

** Installation proper
email_submit.py is a single-file Python program with several
interfaces; to install it, you just need set up each of its interfaces
as an executable file.

   1) Put the email_submit.py file somewhere on your PATH.[fn:4]
   2) Make the email_submit.py file executable.
   3) Create links somewhere on your PATH to email_submit.py, with the names:
      - get-submissions
      - split-attachments
      - send-feedback

\noindent
So, for example, assuming =~/bin= is on your PATH:
#+BEGIN_EXAMPLE
$ mv email_submit.py ~/bin
$ cd ~/bin
$ chmod +x email_submit.py
$ ln -s email_submit.py get-submissions
$ ln -s email_submit.py split-attachments
$ ln -s email_submit.py send-feedback
#+END_EXAMPLE

* Configuration

** Configure your mail fetching program
I can't tell you how to do this in general, but the important point
here is that your mail fetching program needs to feed messages, one at
a time, to the standard input of the =split-attachments= interface to
email_submit.py.

If you are using getmail, here are some recommendations on how best to
do this:
  1) You probably want to make a separate getmail config file
     specifically for the email address you use for assignment
     submissions.  (It's also a good idea to use a separate email
     address for assignment submissions, if you don't want a
     complicated filtering setup.) That way, downloading assignment
     submissions doesn't affect when or how your other email is
     downloaded.[fn:3]
  2) You may want to use multiple destinations and/or keep your
     messages on the server. email_submit.py /throws away/ all parts of
     a message that aren't attachments, so if your students send you
     important information that's not in the attachments, you'll need
     another way to read it.
  3) You should set up the split-attachments interface as an =MDA_external=
     destination.  *Note*: It's important that you set =ignore_stderr = True=
     for this destination.[fn:2]

Here's a simple example:
#+BEGIN_EXAMPLE
[retriever]
type = SimplePOP3SSLRetriever
server = your.server
username = your.username
password = your.password
port = 995

[destination]
type = MDA_external
path = /home/user/bin/split-attachments
# important!!
ignore_stderr = True

[options]
verbose = 2
read_all = False
# leave messages on server
delete = False
# delete them after 7 days
delete_after = 7
#+END_EXAMPLE

** Configuring email_submit.py
Once you have your mail fetching program set up, all configuration for
email_submit.py is done via global variables (marked in =ALL_CAPS= under
"Globals for configuration") at the top of the program file.

I will eventually give more helpful descriptions of the options here,
but for now, the advice is: read the code, change obvious filler
values (e.g., =Your Name= should become, say, =Immanuel Kant=),
leaving quotes, commas and parentheses as they are; and leave the
other values as their defaults.

The exceptions to this rule are the =SMTP_CONNECTION_CLASS= and
=SMTP_ARGS= variables.  Unfortunately, I can't give general advice on
how to configure these variables.  You should be able to leave them
as-is if you have a basic SMTP setup on your computer (as you probably
do, whether you know it or not, if you're running some sort of Unix).

But if you don't know, you should probably just use the same SMTP
settings that your email client uses.  Look there for whether your
SMTP server requires SSL, what its hostname is, and what port you
should connect to it on.  Then send me an email, because I probably
have to change the program to accommodate this setup.  (I only tested
it with a local SMTP server. How's that for assurance?)

* Using the program
If you installed email_submit.py correctly, you should have three
'interfaces' available to you.  These basically behave like three
separate programs, even though they are all contained in the same
file.

The one important concept across all the interfaces is that of the
/submit directory/.  This is where attachments will be saved by the
=get-submissions= interface when they are downloaded, and where the
=send-feedback= interface looks for files to send back to students.

You can set the submit directory on the command line using the =-d=
option (or by setting the EMAIL_SUBMIT_DIRECTORY environment
variable).  If no directory is specified, the current directory is
used.

*Note*: email_submit.py will /not/ create the submit directory
if it doesn't already exist; you must do this yourself.

*Note 2*: to keep things simple, the /only/ files in a given submit
directory should be assignment files submitted by students (or other
files that you'll want to email back to them).  Don't mix files you
want to send back with files you don't want to send.

** The =get-submissions= interface
This interface just tells your mail fetching program to download new
mail.  If you configured your mail fetching program correctly, it
should feed new messages into the =split-attachments= interface
(behind the scenes), resulting in all your students' assignment files
ending up in the submit directory.

So, for example, this command should download all your students'
papers to the directory `paper1':
#+BEGIN_EXAMPLE
$ get-submissions -d paper1
#+END_EXAMPLE
\noindent
Alternatively, you could issue the =get-submissions= command from
within the `paper1' directory without any options:
#+BEGIN_EXAMPLE
$ cd paper1
$ get-submissions
#+END_EXAMPLE
You'll notice that the files, once downloaded to the submit directory,
will all be named using a =<email-address>::<original-file-name>=
format, e.g., `student@wherever.edu::paper1.doc'.  This naming
convention accomplishes two things: first, it associates the file with
the email address of the student who submitted it; and second, it
makes it unlikely that two submissions for the same assignment will
have the same file name.

** The =send-feedback= interface
Once you've downloaded your students' files, you can get to work on
grading them.  Just open each file, leave your comments and grade in
the file, then save it again.

*Note*: do not change the /name/ of the file, because the file name
associates the file with the email address of the student who
submitted the work.

Once you've graded all the files and recorded the grades, you use the
=send-feedback= interface to email them back to students.  This
interface emails every file in the submit directory back to the
address stored in its file name (before the `::') as an attachment.
The body of the message is determined by the =FEEDBACK_MSG= variable,
which you can customize however you like.

*Note 2*: this means you can still use the =send-feedback= interface
to send feedback files, even if your students send you unmodifiable
files (like PDFs).  Just put your comments in a file like
`student@wherever.edu::paper-feedback.txt'.

So, for example, this command should email each of the files in the
`paper1' directory back to students:
#+BEGIN_EXAMPLE
$ send-feedback -d paper1
#+END_EXAMPLE


** The =split-attachments= interface
You probably will never need to use this interface interactively, but
it could occasionally be useful for tasks like getting all the
attachments out of a directory of old email messages.  Be creative!

** Logging
Whenever you use one of email_submit.py's interfaces, the actions that
it takes will be logged.  This is useful for determining what went
wrong if the program fails to work as expected.

The path of the log file is determined by the =log_file= key of the
=OPTIONS= configuration variable, or by the =-l= command line switch.
(The command line switch, if given, takes precedence; but I recommend
setting an absolute path for the log file in the =OPTIONS= variable.)

You can also determine how much information you want to log in the log
file via the =log_level= key of the =OPTIONS= variable.  The possible
values are =logging.DEBUG= (most information), =logging.INFO=,
=logging.WARNING=, =logging.ERROR=, and =logging.CRITICAL= (least
information).

* Footnotes

[fn:1] (Technically, I think a getmail/email_submit.py setup could
      also work on Windows, but it would require a little legwork by
      you, dear user, to get the different interfaces set up: you need
      whatever the Windows equivalent of #!-syntax is, and filesystem
      links to create the different interfaces.)

[fn:2] email_submit.py will always exit with a non-zero status if it
      fails to save an attachment from a message; but it may write to
      sys.stderr even for errors that it handles just fine.

[fn:3] If you sign up for a free email account to use as a submission
      address, be aware that there are some problems accessing GMail
      accounts via POP; see [[http://pyropus.ca/software/getmail/faq.html#faq-notabug-gmail-bug][this answer]] in the getmail FAQ.  If you
      use a GMail submission address, I recommend setting up getmail
      to download your mail via IMAP instead.

[fn:4] Your PATH is a list of directories that your shell (the program
      you type commands in) will search for the programs whose names
      you type on the command line.  You can see your PATH by typing
      =echo $PATH= at the command line.  To add a directory to your
      PATH, edit your shell's startup file.  For example, to add
      =~/bin= to your PATH in the Bash shell, put a line like
      =export PATH=~/bin:$PATH= in the file =~/.bash_profile=.

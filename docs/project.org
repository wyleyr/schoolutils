* Tasks 
** DONE [#A] Interfaces for calculating grades			  :grader:ui:
   - this probably needs to be done in tandem with system configuration
   - need way to map current course to a grading function:
     + naming convention?  e.g. calculate_grades_25A_fall2012?
       this is nice and simple but maybe not general enough...
       would get complicated when course numbers include characters that
       can't be in Python identifiers ('-', '.')
     + configuration must include a function that maps course rows to
       grading functions?
   - I've gone with the naming convention for now.  Let's see how it works.
** DONE [#A] Support for email in students table		      :db:ui:
** CANCELED [#B] Support for middle name in students table		 :db:
   I've decided the right thing to do here is to leave middle names
   in the first_name column, but implement proper fuzzy searching of
   the students table
** DONE [#B] More sophisticated searching			      :db:ui:
   currently all lookups are just exact matches, but this is going to
   become cumbersome for text fields (esp. names)
** DONE [#A] Interface to see/add/edit students in current course   :ui:edit:
** DONE [#A] Interface to see/edit grades in current assignment	    :ui:edit:
** TODO [#B] Interfaces to reporting functions		       :ui:reporting:
** TODO [#D] More sophisticated UI? Curses-based? 			 :ui:
** TODO [#C] Separation of 'view' and 'controller' UI code		 :ui:
** TODO [#B] Summary statistics                                   :reporting:
*** Grade reports for current course
It would be nice to:
  - [X] see averages (mean, median...) by assignment
  - [X] see high score, low score by assignment
  - [X] see which students have no score by assignment
  - [ ] see grade trends for individual students and course as a whole
    (e.g., did students improve overall on second assignment?)
  - [ ] see projected final grades for students?
  - [ ] see how current course compares to others?

Things to think more about:
  1) Histogram bin sizes for "points"-type grades.
  2) Should reports be per-assignment rather than (or in addition to)
     per-course?
  3) In general, need an API for user-defined reports.

*** Implementation proposal
1) schoolutils.reporting: home for reporting functions
   - stats module for statistics functions?
   - functions for generating reports in a variety of formats
     (HTML? Latex/PDF? Markdown?? Org??)
   - optional charts module for generating graphs?
2) access to reports through UI
   - ReportingUI subclass of BaseUI?
   - run reports from SimpleUI
   - view text-based reports in pager
3) email grade reports to students at end of semester?

Creating reports requires the following phases:
1) Data gathering: collect the relevant data specific to the report
2) Calculations: calculate summary statistics
3) Output formatting

The problem is to create an API that is general enough to handle all
desireable combinations of data gathering and calculation but without
having to write specific output formatting code for every report or
calculation. 

It would be nice for reporting to be this easy:
#+BEGIN_SRC python
  # run reports from UI:
  r = GradeReport(db_connection=self.db_connection, course_id=course_id)
  
  print r.as_text() # or run in pager
  with open('/tmp/grades.html', 'w') as f:
      f.write(r.as_html())
  # etc.
#+END_SRC

** CANCELED [#C] PGP encryption/decryption of database file           :ui:db:
   :LOGBOOK:
   - State "CANCELED"   from "TODO"       [2016-12-18 Sun 14:30] \\
     This is better done with something like git-crypt, IMO.
   :END:
** TODO [#A] Export grades to gradebook format		   :bspace:ui:export:
** DONE [#C] distribute on PyPI					  :packaging:
   - need to remove/abstract out Berkeley-specific code, like
     db.sid validator and bspace module
   - better keywords/metadata
   - docs
** TODO [#C] Interface for emailing grades, stats to students	  :ui:export:
** TODO [#C] Interface for creating mailing lists		  :ui:export:
** DONE [#A] System configuration			       :ui:packaging:
   Python module?  ConfigParser?
   - path to grader functions
   - path to db
   - current course(s) / semester, year
   - email setup

** TODO [#B] Support for readline					 :ui:
   - in db lookups 
   - in path 
** TODO [#B] DB-level sorting						 :db:
   - just have default ORDER BY clauses?
   - order_by interface in API?
** TODO [#B] Abstract get_student logic into incremental_search?	 :ui:
   - is it possible to have a generic interface for incremental seach
     that isn't too unwieldy?  so we could have get_student, get_course,
     get_assignment, ... which would all make for nicer interfaces
     for lookup-or-create type actions 
** DONE [#A] Make sure examples/*.py get installed in a reasonable place :packaging:bug:
   This is fixed reasonably well, for Debian-style systems at least;
   pip installs examples to /usr/local/share/schoolutils/examples.
   No idea if it works, or how, on Windows or other Unixes.  May need
   to revisit in the future.
** DONE [#A] Write docs for initial release!				:doc:
** DONE [#C] Make compatible with Python 3             :packaging:
   - [X] use print_function
   - [X] do not use dict.iteritems()
   - [X] rename cStringIO to io.StringIO
   - [X] rename raw_input to input
   - [X] unicode vs. str objects:
     Note that str objects must be used as keys in 2.x, so we can't just
     use import unicode_literals.
     + [X] reporting/reports.py: pass unicode to io.StringIO.write
   - [X] bug: getting IndexError in 3.2 in GradeReport.calculate_stats
     Not sure what the issue is here, yet...possibly due to
     change in filter()?
   - [X] fix uses of map(), filter()
     Can probably do this automatically with 2to3:
     $ 2to3 -f map -f filter ~/src/schoolutils/schoolutils
     + [X] reports.py
     + [X] ui.py
     + [X] calculator_helpers.py
   - [X] fix uses of zip()
    
** DONE [#A] Figure out the best thing to do with user validators     :ui:db:
   useful validators include:
   - sid
   - course_num
   - assignment_name
   what's the proper behavior here?  should db module import user_validators,
   and wrap the appropriate validator in its own version?
   e.g.
   from schoolutils.config import user_validators
   def sid(s):
       if user_validators.sid:
          return user_validators.sid(s)
       else:
          # ...
** DONE [#A] Interfaces to edit existing assignments, courses, grades :ui:edit:
   - need to be able to modify and delete these
   - [X] edit_grades
   - [X] edit_courses
   - [X] edit_assignments
     
** DONE [#A] Make executable scripts with CLI options		     :ui:bin:
   - bin/grade: start the grader
     options:
     + -a "Paper 1" : select assignment
     + -c "course num" : select course
     + -e : enter grades
     + -g : calculate grades
     + -i : import students
     + -x : export grades
** DONE [#B] Interface for exporting (sorted) lists of grades	  :ui:export:
** TODO [#A] Test and fix nested KeyboardInterrupt loop breakout	 :ui:
** TODO [#B] Figure out institution setup				 :ui:
   - need an API definition for institution modules
     + validators?
     + csv formats?
   - institution var in user_config
   - import user_institution module in config? 
   
   Proposal:
   1) Institution modules provide the following:
      - a UI subclass that provides a few specific methods, and can
	override any of the actions of the BaseUI/SimpleUI classes
      - a validators module that will be loaded when the user
        specifies an institution but does not provide a validators.py
   2) The institution UI subclass API:
      - csv_to_student_dicts(filename)
      - student_dicts_to_csv(filename, student_dicts)
      - csv_to_grade_dicts(filename)
      - grade_dicts_to_csv(filename, grade_dicts)
   3) Institution modules must (in __init__.py) export this UI
      subclass as InstitutionUI
   4) In schoolutils.config, we:
      - import user_config
      - if user_config has 'institution' attribute, 
	user_institution = __import__(user_config.institution, fromlist=['schoolutils', 'institutions'])
	UIClass = __import__('InstitutionUI', fromlist=['schoolutils',
                             'institutions', user_config.institution])
      - use user_config.institution to find a validators module, if
        the user provides none
   5) in bin/grade, we:
      - run schoolutils.config.UIClass().main_loop

** TODO [#B] Improve change_database, change_course, change_assignment, etc. :ui:
   - edge case: should not have to retype db path if provided on CLI
     but no database exists there yet
   - implement current_courses option
   - incremental search for course, assignment?
   - fallback to create new assignment from selection menu seems to be
     broken; also, the extra step here seems totally extraneous
   - calculate_all_grades interface to loop over all current courses
   
** DONE [#A] Fix grade calculations				  :bug:ui:db:
   - problem 1: if grades are missing, we crash with a KeyError
   - problem 2: if user works around this by trying to use dictionary methods
     on GradeDict, data corruption happens *really easily*
     e.g. the following clobbered not just calculated grades, but ALL
     grades for the given course:
    for k in assignments:
        if k not in student_grades: # broken
            student_grades[k] = 'F'

   - problem 3: running grade calculation multiple times might lead to multiple
     grade values for calculated grades(?) -- see GradeDict.save()
   - problem 4: some calculated fields don't seem to update when calculations
     are re-run.
     The case I have observed here is if all the entered grades are
     set to 'F', a calculated grade "Paper average" ends up as null
     rather than 0.0, and re-running calculations doesn't fix it.
     This seems to be an extreme edge case caused by SQLite's dynamic typing;
     it doesn't happen if the calculated value is non-zero.
*** Ideas for a better interface
    1) Need to make API more robust.  Abstract over db operations, so
       that we can have a functional data flow, but keep things
       flexible enough to accommodate different grading schemes.
    2) Remember that the primary concept here is
       grades-for-assignments, not grades.  User will often want to
       iterate over all the assignments for the course, not just
       those for which the student has a grade.  On the other hand,
       some grading schemes don't require students to turn in every
       assignment.  
    3) User may sometimes want to update entered grades, not just
       create calculated grades.  (e.g., fill in 'F' for missing
       grades)
    4) It would be good to guarantee idempotence: re-running grade
       calculations should never result in data loss/change for
       entered grades.  But this is in tension with (3).
    5) Should also plan for the possibility of multiple grades
       recorded for a given student on an assignment.  Users may want
       to select the most recent grade, or the highest, etc.
    6) Users may want to compute grades on a per-class rather than
       per-student basis, e.g., to compute final grades on a curve
       based on average scores.  (This would be a big change.)

Something like this?       
#+BEGIN_SRC python
  from schoolutils.grading import calc_helpers as ch
  
  def calculate_grade_146_fall2013(rows):
      # simple case: just need co-indexed lists of grade values, weights, etc.
      vals, weights, types, assignment_names = ch.unpack_entered_grades(rows)
  
      # the actual calculations
      avg = ch.letter_grade_average(vals, weights=weights, missing='F')
      final = ch.points_to_letter(avg)
  
      # simple case: just a name for the calculated field and a value 
      # other fields in assignment and grades tables automatically populated
      return {
          'Paper average': avg,
          'Final grade': final,
      }
  
      # for more complicated needs: list of dictionaries specifying
      # name, description, type, value
      # optional: include grade_id as a key to update an existing grade,
      # or assignment_id to create a new grade for an existing assignment
      return [
          dict(name='Paper average',
               value=avg,
               description='Weighted average of paper grades',
               grade_type=ch.FOUR_POINT),
          dict(name='Final grade',
               value=final,
               description='Raw letter grade',
               grade_type=ch.LETTER),
          # update existing grade
          dict(grade_id=some_grade_id,
               value=new_value)
          # create grade for assignment
          dict(assignment_id=some_assignment_id,
               value='F')
          ]
  
   
#+END_SRC       

On the other hand, maybe these considerations are pointing toward a
two-tiered API.  The two kinds of calculation function could be
combined, so that e.g. one could run 
#+BEGIN_SRC python
  # simple case: per-student calculations based on
  # grade values, weights, types, and assignment names.
  # Return dictionary mapping names of calculated grades to values.
  # Could also allow a list of dictionaries as described above.
  def calculate_student_grade_12A_fall2012(values, weights, types, names):
      # ...
      return {
          'Homework average': avg,
          'Raw final score': final,
      }
  
  # complex case: full access to database, convenience methods,
  # procedural rather than functional API
  def calculate_complex_grade_12A_fall2012(marshal):
      # marshal provides db connection, as well as convenience methods for
      # getting grades for individual students as well as the whole class,
      # etc. etc.
      class_exam_scores = marshal.all_grades_for('Final exam (raw score)')
      boxes = ch.make_curve(class_exam_scores, min=40) # etc.
      for s in marshal.students():
          # ... assign each student a letter grade based on curve, etc.
          score = marshal.grade_for_student(s, 'Final exam (raw score)')
          grade = ch.score_to_curved_grade(score, boxes)
          marshal.calculated_grade('Final exam (curved)', type=letter)
  
      # or simply do database manipulations yourself:
      dbc = marshal.db_connection
      grades = db.select_grades(dbc, course_id=marshal.course_id)
      # etc.
#+END_SRC
** TODO [#A] Testing framework					    :testing:
   - need to write tests for bugs, automate testing
   - use virtualenv to test empty configuration
** HOLD [#B] Distinguish weight vs. possible points?		      :ui:db:
   - currently, assignments.weight field is intended to be interpreted
     as either percentage of final grade (for most grade types) OR
     number of possible points (for 'points' grades)
   - but this scheme does not permit giving 'points' grades
     fractional weights of a final grade -- in effect it assumes that
     either all the grades in a course are of type 'points' or none are.
   - do we need a way around this?
     + Yes: the program is not complete unless there are library
       functions for calculating grades in a course with mixed grade types
     + No: grade calculation functions can look up the weight fields
       on the various assignments (or hard code them) and compute
       accordingly, and that's the user's responsibility
     + Think I'm in the 'No' camp for now
** DONE [#B] Re-architect database selections			      :ui:db:
   - make use of connection.row_factory, perhaps sqlite3.Row
   - return cursors instead of always calling fetchall()?
   - main reasons this is needed:
     1) relying on fixed positions for fields produced by select_*
        functions is extremely(!) fragile
     2) GradeDict does not seem to be the right abstraction; need a better
	way for user-defined calculators to get all the right information
	they need about student grades (and locate it in the data
        passed in) without needing to hit the db.  It would be nice
        to do something like
	def my_grade_calculator(grade_rows):
	    weights = map(lambda r: r['weight'], grade_rows)
	    grades = map(lambda r: r['value'], grade_rows)
	    # ...

** TODO [#C] Replace db.last_insert_rowid() with native sqlite3 call 	 :db:
** DONE [#A] Completion message for grade calculation, export		 :ui:
** TODO [#B] Use itertools.groupby() to save database hits?  :ui:performance:
   instead of hitting database with a new query for each student, we
   can do e.g.
#+BEGIN_SRC python
  import itertools
  
  # get all the grade rows for the whole class
  all_grades = db.select_grades_for_course_members(db_connection, course_id=course_id)
  
  # then loop over them by student
  for student_id, rows in itertools.groupby(all_grades, lambda r: r['student_id']):
      # here, rows will be just grades for one student...
      # this assumes the rows are already grouped by student_id field,
      # which is presently true but maybe doesn't need to remain so
#+END_SRC

** HOLD [#A] Decide how to handle multiple grades for a single assignment :ui:db:
Problem:
  1) It seems natural to allow multiple grades for the same student
     and assignment
     - can treat database as a log; never destroy old data, just
       layer on top
     - some teaching settings might allow this (e.g., revisions?)
  2) But allowing multiple grades presents some thorny UI problems.
     Which, if any, is the `right' grade to display/update/export?

For now, *I* only need one grade per assignment per student, so I am
going to continue assuming this, but code may need to be updated in future.

Affected functions:
    SimpleUI: edit_grades, export_grades, calculate_grades
       
** CANCELED [#C] New UI class PipeUI to handle CLI usage?                :ui:
   :LOGBOOK:
   - State "CANCELED"   from "TODO"       [2016-12-18 Sun 14:40] \\
     I'd rather have an Org UI
   :END:
   so we could say things like:
   $ grade -c 146 -s spring -y 2013 --import-students < student_list.txt
   $ grade -c 146 -s spring -y 2013 --calculate-grades --export-grades > grades.csv
** CANCELED [#B] Remove broken code from 0.1.5 release	      :bug:packaging:
   in institutions directory...produces error message during install
   (seems to have resolved itself...)
** DONE [#A] Adding student to course doesn't work		     :bug:ui:
Observed problems:
1) student doesn't end up in course when added via edit_course_members!
2) "Deletion unsuccessful" when deleting existing student.

** DONE [#C] Don't require 's' prefix to make selection in edit_table?	 :ui:
   Since edit_table is now being used to select current course and
   assignment, one can reflexively enter the row number to select a
   row, but that ends up editing the row rather than selecting it,
   which is not usually what you want.
   Options:
   1) always require explicit prefix? ('e' to edit, etc.)
   2) when selector is present, use different prefixes, allow
      selection by number?
            	     
** TODO [#A] Documentation!						:doc:
   - [ ] Tutorial: how to write calculator functions
   - [ ] Document import/export formats
   - [ ] complete API docs? autogenerate from docstrings?
     
Where to document?  Bitbucket wiki? pythonhosted.org? readthedocs.org?
Is there a common format that I can use to publish in multiple places?
** DONE [#A] enter_grades: Offer to add student to current course	 :ui:
** DONE [#A] Clarify database setup on first run		     :doc:ui:
   - note that user gets to pick location of gradedb_file in README,
     config.py comments
   - deal with first run corner case: user has set gradedb_file, but
     no db exists yet; user should not have to re-type path
     (quick fix: just use the value of gradedb_file as the
     default when prompting for a db location)
** DONE [#A] Better prompt/header for edit_courses
Asking user to enter 'course #' is confusing for new users.  Probably
would be better to go back to using `row #', but keep entity=... for
selections.

From M. Rieppel:
> I think the table heading is part of what makes it confusing:
> 
>   #: Courses
> 
> --------------------------------------------------------------------------------
>   0: 2: phil2 (Summer 2013)
> 
> in the heading, there is just one colon, but in the table itself there are
> two, so it wasn't clear to me whether the '#' in the header and the
> instructions referred to the row or the course number.  I think the
> instructions might be clearer if they said something like "prefix the row #
> associated with the course with 'e' to edit" etc.

Solution here:
  1) change course_formatter to use "-" rather than ":" between course
     number and name
  2) change prompt text in edit_table to make it clear that we want
     the ROW #, not the course number
** DONE [#B] Simple histogram on grade report		       :reporting:ui:
print a "|" for each grade level in current assignment? if letter
grades?
** DONE [#B] Automatic selection of current assignment		  :grader:ui:
If multiple assignments exist for the current course, select the one
that was most recently due?
** TODO [#A] Correct `points' ambiguity in calculator_helpers.py	 :ui:
   Right now, functions dealing with 4.0-scale grades use `points' in
   their names, which is inconsistent with the grader's use of
   `points' as a type for grades which have a number of possible
   points.  Change to `fourpoints'?
** TODO [#B] More helpful messages in report for ungraded assignments :ui:reporting:
   Since 0.1.7, assignments with no grades in them get an unhelpful:
   "No statistics available for this assignment, because:
    min() arg is an empty sequence"
   This is arguably better than the previous situation (a complete but
   empty report containing every student's name as someone who is
   missing a grade).  But it would be better to indicate that no
   information is provided because no grades have been entered for
   that assignment.
** TODO [#A] Org-based UI
   - enter grades in Org tables
   - write calculators as Babel code blocks
   - display table with calculated grades, grade reports, etc. to user
   - use grade table to update underlying database 
*** TODO Prologue or similar for setting up UI when evaluating a code block
Need a function to do the same things the command line UI does: import
config files, set up important state (current
year/semester/class/assignment), etc.  Then this can be called in Org
using the :prologue header argument.

Better option: don't do this as a prologue; instead, expose various
tables (Assignments, GradeSpreadsheet, etc.) as classes *that derive
from BaseUI*, so they automatically get access to a db connection,
user config, etc.

*** TODO OrgTable base class     
This class should be in charge of marshalling data between the Org
table format (basically, a list of lists of strings) and the grade
database tables, and providing convenient abstractions for
manipulating and displaying that data in a way Org understand.
**** TODO Load and validate data from an Org table
**** TODO Load data from underlying database 
(for easy display of existing data in Org)
**** TODO Pretty-print results table in a way Org understands

*** TODO GradeTable class
It would be nice to write a table in Org like

|      SID | Essay 1 | Essay 2 |
|----------+---------+---------|
| 01234567 | A-      |         |

then be able to say
#+BEGIN_SRC python :var grades=grade_table
from schoolutils.grading.ui.org import GradeTable

gt = GradeTable(grade_table)
essay1_grades = gt[assignment="Essay 1"]
student1_grades = gt[sid="01234567"]
for row in gt:
  final_grade = weighted_average(row)
# etc.
#+END_SRC

This class should inherit from OrgTable 
**** TODO Convenience methods
     - extract row for student
     - extract column for reporting by assignment
     - commit to database as updates or overwrites


*** TODO AssignmentTable class
It would be nice to write a table in Org like

| Assignment | Type   | Weight | Due date         |
|------------+--------+--------+------------------|
| Essay 1    | letter |   0.20 | <2014-12-04 Thu> |

then be able to say
#+BEGIN_SRC python :var assignments=assignments
from schoolutils.grading.ui.org import AssignmentTable

at = AssignmentTable(assignments)
at.commit()
# etc.
#+END_SRC

This class should inherit from OrgTable 

** TODO Better support "intermediate" grades and final calculations
A common pattern I need is:
  - calculate intermediate grades from raw rubric scores
  - then calculate the final grade from intermediate grades

Another thing that would be helpful regardless of whether letter
grades are entered or intermediate: an equivalent of
letter_grade_average function that works on the rows passed to the
grade calculation function.  It should be as easy as writing

#+BEGIN_SRC python
  def calculate_grade_foo(rows):
    return {name: 'Final grade',
            value: ch.average_over(rows) # possibly filtering out rows first
            }
#+END_SRC
         
** TODO Support entering grades for everyone in course
At the end of the semester, I may need to assign everyone a
participation grade, etc.  It would be nice to just loop over everyone
in the course and assignment them a grade, without having to search
for every student.

* Bug notes
** f890cef9d: grading/db.py: fix bug in select_students giving duplicate rows
   - problem was join: a student can appear in multiple courses, so
     if no course constraints are present, multiple student records can
     be returned
   - actually, there's still a problem in the case where course_name is
     given but the student is enrolled in multiple courses with the
     same name (or similar names with the _like version); but this edge
     case is rare enough that it probably won't happen for other
     reasons, so I won't fix it for now
     
